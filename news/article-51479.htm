<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nexthiddify.github.io/news/article-51479.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树</title>
        <meta name="description" content="本文从树数据结构说到二叉堆数据结构，再使用二叉堆的有序性对无序数列排序。 1. 树 树是最基本的数据结构，可以用树映射现实世界中一对多的群体关系。如公司的组织结构、网页中标签之间的关系、操作系统中文件" />
        <link rel="icon" href="/assets/website/img/nexthiddify/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Hiddify Next节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nexthiddify.github.io/news/article-51479.htm" />
    <meta property="og:site_name" content="Hiddify Next节点分享站" />
    <meta property="og:title" content="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树" />
    <meta property="og:image" content="https://nexthiddify.github.io/uploads/20240502/6bc02cd3d61f270d52919fbd05f22b30.webp" />
        <meta property="og:release_date" content="2025-02-05T08:19:42" />
    <meta property="og:updated_time" content="2025-02-05T08:19:42" />
        <meta property="og:description" content="本文从树数据结构说到二叉堆数据结构，再使用二叉堆的有序性对无序数列排序。 1. 树 树是最基本的数据结构，可以用树映射现实世界中一对多的群体关系。如公司的组织结构、网页中标签之间的关系、操作系统中文件" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://cdn.bootcdn.net">
    <link rel="dns-prefetch" href="https://oss.maxcdn.com">

    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/website/css/nexthiddify/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/website/css/nexthiddify/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-1WE756N89P"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-1WE756N89P');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <a class="navbar-brand" href="/">
                                                        <span>Hiddify Next</span>
                                                        </a>
                        </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                <li><a href="/news/">新闻资讯</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/news/">新闻资讯</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                                <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>本文从<code>树数据结构</code>说到<code>二叉堆数据结构</code>，再使用<code>二叉堆</code>的有序性对无序数列排序。</p> <h2 id="1-树">1. 树</h2> <p><code>树</code>是最基本的数据结构，可以用<code>树</code>映射现实世界中一对多的群体关系。如公司的组织结构、网页中标签之间的关系、操作系统中文件与目录结构……都可以用树结构描述。</p> <p>树是由<code>结点</code>以及<code>结点之间的关系</code>所构成的集合。关于树结构的更多概念不是本文的主要内容，本文只关心树数据结构中的几个特殊变种：</p> <p><strong><code>二叉树</code></strong></p> <p>如果树中的任意结点（除叶子结点外）<strong>最多</strong>只有两个子结点，这样的树称为<code>二叉树</code>。</p> <p><strong><code>满二叉树</code></strong></p> <p>如果<code>二叉树</code>中任意结点（除叶子结点外）都有<code>2</code> 个子结点，则称为<code>满二叉树</code>。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/dd7a603ca79d9c15e32e9c16c96d9ef6.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <p><strong>满二叉树的特性：</strong></p> <p>根据<code>满二叉树</code>的定义可知，<code>满二叉树</code>从上向下，每一层上的结点数以<code>2</code> 倍的增量递增。也可以说，满二叉树是一个首项为<code>1</code>  ，公比为<code>2</code> 的等比数列。所以：</p> <ul> <li> <p>一个层数为<code>k</code> 的满二叉树总结点数为：2<sup>k</sup>-1 。</p> <blockquote> <p>满二叉树的总结点数一定是奇数！</p> </blockquote> </li> <li> <p>根据等比公式可知第<code>i</code> 层上的结点数为：2<sup><code>i-1</code></sup>，因此，一个层数为<code>k</code> 的满二叉树的叶子结点个数为: 2<sup><code>k-1</code></sup>。</p> </li> </ul> <p><strong>什么是完全二叉树？</strong></p> <p><code>完全二叉树</code>是<code>满二叉树</code>的一个特例。</p> <p><strong>通俗理解：</strong> 在<code>满二叉树</code>基础上，从<strong>右向左</strong>删除几个叶子节点后，此时满二叉树就变成了完全二叉树。如下图，在上图满二叉树基础上从右向左删除<code>2</code> 个叶结点后的结构就是完全二叉树。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ba8b52b1fd3f17b49189005e3d3346e4.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <p><strong>完全二叉树的专业概念：</strong></p> <p>一棵深度为<code>k</code> 的有<code>n</code> 个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为<code>i（1&lt;=i&lt;=n）</code> 的结点与满二叉树中编号为<code>i</code> 的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树。</p> <blockquote> <p>专业概念有点像绕口令。</p> </blockquote> <p>显然，完全二叉树的叶子结点只能出现在最下层或次下层，且最下层的叶子结点集中在树的左部。</p> <blockquote> <p>注意：满二叉树肯定是完全二叉树，而完全二叉树不一定是满二叉树。</p> </blockquote> <h2 id="2-二叉堆">2. 二叉堆</h2> <p><code>二叉堆</code>是<strong>有序</strong>的<code>完全二叉树</code>，在<code>完全二叉树</code>的基础上，<code>二叉堆</code> 提供了<strong>有序性特征</strong>：</p> <ul> <li> <p><code>二叉堆</code> 的<strong>根结点</strong>上的值是整个堆中的<code>最小值</code>或<code>最大值</code>。</p> <blockquote> <p>当根结点上的值是整个堆结构中的最小值时，此堆称为最小堆。</p> <p>如果根结点上的值是整个堆结构中的最大值时，则称堆为最大堆。</p> </blockquote> </li> <li> <p>最小堆中，任意节点的值大于父结点的值，反之，最大堆中，任意节点的值小于父结点的值。</p> </li> </ul> <p>综合所述，二叉堆的父结点与子结点之间满足下面的关系：</p> <ul> <li> <p>如果知道了一个结点的位置<code>i</code>，则其左子结点在<code>2*i</code> 处，右子结点在<code>2*i+1</code> 处。</p> <blockquote> <p>前提是结点要有子结点。</p> </blockquote> </li> <li> <p>如果知道了一个结点的位置<code>i</code>，则其父结点在<code>i</code>除<code>2</code> 处。</p> <blockquote> <p>根结点没有父结点。</p> </blockquote> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/829279d7db3c254ba9db0b679ac43d2e.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <p><strong>如上图所示：</strong></p> <p>值为<code>5</code> 的结点在<code>2</code> 处，则其左结点<code>12</code> 的位置应该在<code>2*2=4</code> 处，而实际情况也是在 4 位置。其右子结点<code>13</code> 的位置应该在<code>2*2+1=5</code> 的位置，实际位置也是在<code>5</code> 位置。</p> <p>值为<code>19</code> 的结点现在<code>7</code> 位置，其父结点的根据公式<code>7</code> 除<code>2</code> 等于<code>3</code>(取整)，应该在<code>3</code> 处，而实际情况也是在<code>3</code> 处（位置在<code>3</code>、 值为<code>8</code> 的结点是其父结点）。</p> <h3 id="21--二叉堆的抽象数据结构">2.1  二叉堆的抽象数据结构</h3> <p>当谈论某种数据结构的抽象数据结构时，最基本的<code>API</code> 无非就是增、删、改、查。</p> <p>二叉堆的基本抽象数据结构：</p> <ul> <li><code>Heap()</code> ：创建一个新堆。</li> <li><code>insert(data)</code>： 向堆中添加新节点（数据）。</li> <li><code>get_root()</code>： 返回最小（大）堆的最小（大）元素。</li> <li><code>remove_root()</code> ：删除根节点。</li> <li><code>is_empty()</code>：判断堆是否为空。</li> <li><code>find_all()</code>：查询堆中所有数据。</li> </ul> <p><code>二叉堆</code>虽然是树结构的变种，有树的层次结构，但因结点与结点之间有很良好的数学关系，使用<code>Python</code> 中的列表存储是非常不错的选择。</p> <p>现如有一个数列=<code>[8,5,12,15,19,13,1]</code>，现使用二叉堆方式保存。先构造一个列表。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c6ec06948ce0be62cab55923e84fa4da.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <p>列表中的第<code>0</code> 位置初始为<code>0</code>，从第<code>2</code> 个位置也就是索引号为<code>1</code> 的地方开始存储堆的数据。如下图，二叉堆中的数据在列表中的存储位置。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/13b78867dbed0b9dc8d696e8be5d75f8.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <h3 id="22--api--实现">2.2  API  实现</h3> <p>设计一个<code>Heap</code> 类封装对二叉堆的操作方法，类中方法用来实现最小堆。</p> <pre><code class="language-python">''' 模拟最小堆 '''  class Heap():      # 初始化方法     def __init__(self):         # 数列，第一个位置空着         self.heap_list = [0]         # 大小         self.size = 0      # 返回根结点的值     def get_root(self): 		pass      '''     删除根结点     '''     def remove_root(self):         pass      # 为根结点赋值     def set_root(self, data):      	pass      # 添加新结点     def insert(self, data):         pass      # 是否为空     def is_empty(self):         pass</code></pre> <p><strong><code>Heap</code> 类中的属性详解：</strong></p> <ul> <li> <p><code>heap_list</code>：使用列表存储<code>二叉堆</code>的数据，初始时，列表的第<code>0</code> 位置初始为默认值<code>0</code>。</p> <blockquote> <p>为什么要设置列表的第<code>0</code> 位置的默认值为<code>0</code>？</p> <p>这个<code>0</code> 也不是随意指定的，有其特殊数据含义：用来描述根结点的父结点或者说根结点没有父结点。</p> </blockquote> </li> <li> <p><code>size</code>：用来存储二叉堆中数据的实际个数。</p> </li> </ul> <p><strong><code>Heap</code> 类中的方法介绍：</strong></p> <p><code>is_empty</code>：检查是不是空堆。</p> <pre><code class="language-python">    # 长度为 0 ,则为空堆     def is_empty(self):         return self.size==0</code></pre> <p><code>set_root</code>：创建根结点。保证根节点始终存储在列表索引为<code>1</code> 的位置。</p> <pre><code class="language-python">    # 为根结点赋值     def set_root(self, data):         self.heap_list.insert(1, data)         self.size += 1</code></pre> <p><code>get_root</code>：如果是最大堆，则返回二叉堆的最大值，如果是最小堆，则返回二叉堆的最小值。</p> <pre><code class="language-python">    # 返回根结点的值     def get_root(self):         # 检查列表是否为空         if not self.is_empty():             return self.heap_list[1]         raise Exception("空二叉堆！")</code></pre> <blockquote> <p>使用列表保存二叉堆数据时，根结点始终保存在索引号为<code>1</code> 的位置。</p> </blockquote> <p>前面是几个基本方法，现在实现添加新结点，编码之前，先要知道<strong>如何在二叉堆中添加新结点：</strong></p> <p>添加新结点采用<strong>上沉算法</strong>。如下演示流程描述了上沉的实现过程。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/0cf98d50c5c820e98552d3a5f4ecbe04.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <ol> <li>把<code>新结点</code>添加到已有的<code>二叉堆</code>的最后面。如下图，添加值为<code>4</code> 的新结点，存储至索引号为<code>7</code> 的位置。</li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/98f8cb58b06d1624bb26fc15d43c21f5.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <ol start="2"> <li>查找<code>新结点</code>的<code>父结点</code>，并与<code>父结点</code>的值比较大小，如果比父结点的值小，则和<code>父结点</code>交换位置。如下图，值为<code>4</code> 的结点小于值为<code>8</code> 的父结点，两者交换位置。</li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c21ec468b2497242b578cb263e78cb3b.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <ol start="3"> <li>交换后再查询是否存在父结点，如果有，同样比较大小、交换，直到到达根结点或比父结点大为止。值为<code>4</code> 的结点小于值为<code>5</code> 的父结点，继续交换。交换后，新结点已经达到了根结点位置，整个添加过程可结束。观察后会发现，遵循此流程添加后，没有破坏二叉堆的有序性。</li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1840031ec68fa1ac969932204a2e93b5.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <p><strong><code>insert</code> 方法的实现：</strong></p> <pre><code class="language-python">    # 添加新节点     def insert(self, data):         # 添加新节点至列表最后         self.heap_list.append(data)         self.size += 1         # 新节点当前位置         n_idx = len(self.heap_list) - 1         while True:             if n_idx // 2 == 0:                 # 当前节点是根节点，根结点没有父结点，或说父结点为 0，这也是为什么初始化列表时设置 0 为默认值的原因                 break             # 和父节点比较大小             if self.heap_list[n_idx] &lt; self.heap_list[n_idx // 2]:                 # 和父节点交换位置                 self.heap_list[n_idx], self.heap_list[n_idx // 2] = self.heap_list[n_idx // 2], self.heap_list[n_idx]             else:                 # 出口之二                 break             # 修改新节点的当前位置             n_idx = n_idx // 2</code></pre> <p><strong>测试向二叉堆中添加数据。</strong></p> <ol> <li>创建一个空堆。</li> </ol> <pre><code class="language-python">heap = Heap()</code></pre> <ol start="2"> <li>创建值为<code>5</code> 的根结点。</li> </ol> <pre><code class="language-python">heap.set_root(5)</code></pre> <ol start="3"> <li>检查根结点是否创建成功。</li> </ol> <pre><code class="language-python">val = heap.get_root() print(val) ''' 输出结果 5 '''</code></pre> <ol start="4"> <li>添加值为<code>12</code>和值为<code>13</code> 的<code>2</code> 个新结点，检查添加新结点后整个二叉堆的有序性是否正确。</li> </ol> <pre><code class="language-python"># 添加新结点 heap.insert(12) heap.insert(13) # 输入数列 print(heap.heap_list) ''' 输出结果 [0, 5, 12，13] '''</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9670f85d2afb197600fda3a948b1c4ee.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <ol start="5"> <li>添加值为<code>1</code> 的新结点，并检查二叉堆的有序性。</li> </ol> <pre><code class="language-python"># 添加新结点 heap.insert(1) print(heap.heap_list) ''' 输出结果 [0, 1, 5, 13, 12] '''</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/520cd896cd9314d0db2a70492f1994c2.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <ol start="6"> <li>继续添加值为<code>15</code>、<code>19</code>、<code>8</code> 的<code>3</code> 个新结点，并检查二叉堆的状况。</li> </ol> <pre><code class="language-python">heap.insert(15) heap.insert(19) heap.insert(8) print(heap.heap_list) ''' 输出结果 [0, 1, 5, 8, 12, 15, 19, 13] '''</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6cf240c134a02ccc05d629952a3c3c0c.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <p><strong>介绍完添加方法后，再来了解一下，如何删除二叉堆中的结点。</strong></p> <p><code>二叉堆</code>的删除操作从根结点开始，如下图删除根结点后，空出来的根结点位置，需要在整个二叉堆中重新找一个结点充当新的根结点。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/44e095ad25f27548565ddf3bdaac19d9.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <p>二叉堆中使用<strong>下沉算法</strong>选择新的根结点：</p> <ol> <li>找到二叉堆中的最后一个结点，移到到根结点位置。如下图，把二叉堆中最后那个值为<code>19</code> 的结点移到根结点位置。</li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6ee7d82bdf86570c785bf83125e085a9.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <ol start="2"> <li> <p>最小堆中，如果<code>新的根结点</code>的值比左或右子结点的值大，则和子结点交换位置。如下图，在二叉堆中把<code>19</code> 和<code>5</code>  的位置进行交换。</p> <blockquote> <p>注意：总是和最小的子结点交换。</p> </blockquote> </li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9328ae5564b3ee8529446f118a970658.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <ol start="3"> <li>交换后，如果还是不满足最小二叉堆父结点小于子结点的规则，则继续比较、交换<code>新根结点</code>直到下沉到二叉堆有序为止。如下，继续交换<code>12</code> 和<code>19</code> 的值。如此反复经过多次交换直到整个堆结构符合二叉堆的特性。</li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5d9c55cd141c3eab0643a214d158d04b.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <p><strong><code>remove_root</code> 方法的具体实现：</strong></p> <pre><code class="language-python">	'''     删除根节点     '''     def remove_root(self):         r_val = self.get_root()         self.size -= 1         if self.size == 1:             # 如果只有根节点，直接删除             return self.heap_list.pop()         i = 1         # 二叉堆的最后结点成为新的根结点         self.heap_list[i] = self.heap_list.pop()         # 查找是否存在比自己小的子结点         while True:             # 子结点的位置             min_pos = self.min_child(i)             if min_pos is None:                 # 出口：没有子结点或没有比自己小的结点                 break             # 交换             self.heap_list[i], self.heap_list[min_pos] = self.heap_list[min_pos], self.heap_list[i]             i = min_pos         return r_val      '''     查找是否存在比自己小的子节点     '''     def min_child(self, i):         # 是否有子节点         child_pos = self.is_exist_child(i)         if child_pos is None:             # 没有子结点             return None         if len(child_pos) == 1 and self.heap_list[i] &gt; self.heap_list[child_pos[0]]:             # 有 1 个子节点，且大于此子结点             return child_pos[0]         elif len(child_pos) == 2:             # 有 2 个子节点，找到 2 个结点中小的那个结点             if self.heap_list[child_pos[0]] &lt; self.heap_list[child_pos[1]]:                 if self.heap_list[i] &gt; self.heap_list[child_pos[0]]:                     return child_pos[0]             else:                 if self.heap_list[i] &gt; self.heap_list[child_pos[1]]:                     return child_pos[1]      '''     检查是否存在子节点     返回具体位置     '''     def is_exist_child(self, p_idx):         # 左子节点位置         l_idx = p_idx * 2         # 右子节点位置         r_idx = p_idx * 2 + 1         if l_idx &lt;= self.size and r_idx &lt;= self.size:             # 存在左、右子节点             return l_idx, r_idx         elif l_idx &lt;= self.size:             # 存在左子节点             return l_idx,         elif r_idx &lt;= self.size:             # 存在右子节点         return r_idx,</code></pre> <p><code>remove_root</code> 方法依赖<code>min_child</code>和<code>is_exist_child</code> 方法：</p> <ul> <li> <p><code>min_child</code> 方法用查找比父结点小的结点。</p> </li> <li> <p><code>is_exist_child</code> 方法用来查找是否存在子结点。</p> </li> </ul> <p><strong>测试在二叉堆中删除结点：</strong></p> <pre><code class="language-python">heap = Heap() heap.set_root(5) val = heap.get_root() print(val)  # 添加新结点 heap.insert(12) heap.insert(13) # 添加新结点 heap.insert(1) heap.insert(15) heap.insert(19) heap.insert(8) # 添加结点后二叉堆现状 print("添加结点后二叉堆现状：", heap.heap_list) val = heap.remove_root() print("删除根结点后二叉堆现状：", heap.heap_list) ''' 输出结果 添加节点后二叉堆现状： [0, 1, 5, 8, 12, 15, 19, 13] 删除根节点后二叉堆现状： [0, 5, 12, 8, 13, 15, 19] '''</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6a5922fb6c9a0745a97687a13359bce1.jpg" alt="Python  一网打尽&lt;排序算法&gt;之堆排序算法中的树"></p> <p>可以看到最后二叉堆的结构和有序性都得到了完整的保持。</p> <h2 id="3-堆排序">3. 堆排序</h2> <p>堆排序指借助堆的有序性对数据进行排序。</p> <ul> <li>需要排序的数据以堆的方式保存</li> <li>然后再从堆中以根结点方式取出来，无序数据就会变成有序数据 。</li> </ul> <p>如有数列=[4,1,8,12,5,10,7,21,3]，现通过堆的数据结构进行排序。</p> <pre><code class="language-python">heap = Heap() nums = [4,1,8,12,5,10,7,21,3] # 创建根节点 heap.set_root(nums[0]) # 其它数据添加到二叉堆中 for i in range(1, len(nums)):     heap.insert(nums[i]) print("堆中数据：", heap.heap_list) # 获取堆中的数据 nums.clear() while heap.size &gt; 0:     nums.append(heap.remove_root()) print("排序后数据：", nums) ''' 输出结果 堆中数据： [0, 1, 3, 7, 4, 5, 10, 8, 21, 12] 排序后数据： [1, 3, 4, 5, 7, 8, 10, 12, 21] '''</code></pre> <p>本例中的代码还有优化空间，本文试图讲清楚堆的使用，优化的地方交给有兴趣者。</p> <h2 id="4-后记">4. 后记</h2> <p>在树结构上加上一些新特性要求，树会产生很多新的变种，如二叉树，限制子结点的个数，如满二叉树，限制叶结点的个数，如完全二叉树就是在满二叉树的“满”字上做点文章，让这个''满"变成"不那么满"。</p> <p>在完全二叉树上添加有序性，则会衍生出二叉堆数据结构。利用二叉堆的有序性，能轻松完成对数据的排序。</p> <p>二叉堆中有 2 个核心方法，插入和删除，这两个方法也可以使用递归方式编写。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-51478.htm">实现垂直居中的几种方式</a></p>
                                    </div>
                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-24736.htm" title="合肥哪里能领养宠物 合肥哪里能领养宠物狗">合肥哪里能领养宠物 合肥哪里能领养宠物狗</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-5-free-clash-subscribe.htm" title="「11月5日」最高速度18.5M/S，2024年Hiddify Next每天更新免费节点订阅链接">「11月5日」最高速度18.5M/S，2024年Hiddify Next每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-32238.htm" title="关于Windows系列密码抓取">关于Windows系列密码抓取</a></li>
                        <li class="py-2"><a href="/news/article-29369.htm" title="给动物打针的注射器图片（给动物打针的注射器图片视频）">给动物打针的注射器图片（给动物打针的注射器图片视频）</a></li>
                        <li class="py-2"><a href="/news/article-48894.htm" title="宠物猫抓破皮了要紧吗（宠物猫抓破皮了要紧吗要打针吗）">宠物猫抓破皮了要紧吗（宠物猫抓破皮了要紧吗要打针吗）</a></li>
                        <li class="py-2"><a href="/news/article-51478.htm" title="实现垂直居中的几种方式">实现垂直居中的几种方式</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-19-free-v2ray-subscribe.htm" title="「1月19日」最高速度21.2M/S，2025年Hiddify Next每天更新免费节点订阅链接">「1月19日」最高速度21.2M/S，2025年Hiddify Next每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-33671.htm" title="王允海动物医院(道里店)怎么样（王允海宠物医院）">王允海动物医院(道里店)怎么样（王允海宠物医院）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-1-clash-node.htm" title="「1月1日」最高速度18.2M/S，2025年Hiddify Next每天更新免费节点订阅链接">「1月1日」最高速度18.2M/S，2025年Hiddify Next每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-28459.htm" title="vue-element-admin 配置接口请求，跨域，版本4">vue-element-admin 配置接口请求，跨域，版本4</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">15</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <span class="copytext">
                                Hiddify Next节点分享站 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                <li><a href="/news/">新闻资讯</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/website/js/frontend/nexthiddify/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/website/js/frontend/nexthiddify/smoothscroll.js"></script>
    <script src="/assets/website/js/frontend/nexthiddify/mobile-menu.js"></script>
    <script src="/assets/website/js/frontend/nexthiddify/scripts.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>