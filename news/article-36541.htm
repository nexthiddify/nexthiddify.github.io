<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://nexthiddify.github.io/news/article-36541.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>node.js &#8211; 包、express</title>
        <meta name="description" content="首先，要先在这里分享一下我的喜悦，从昨天开始其实一直都在喜悦当中的，我收到了我的第一份offer，这感觉不摆了，比第一桶金都还舒服，虽然我还没收到第一桶金哈哈，不过offer都得了应该也快了。 今天的" />
        <link rel="icon" href="/assets/website/img/nexthiddify/favicon.ico" type="image/x-icon"/>
    <!-- web-fonts -->
    <link href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,700,500' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Montserrat:400,700' rel='stylesheet' type='text/css'>
    <!-- off-canvas -->
    <link href="/assets/website/css/nexthiddify/mobile-menu.css" rel="stylesheet">
    <!-- font-awesome -->
    <link href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" rel="stylesheet">
    <!-- Flat Icon -->
    <link href="fonts/flaticon/flaticon.css" rel="stylesheet">
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <!-- Style CSS -->
    <link href="/assets/website/css/nexthiddify/style.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-1WE756N89P"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-1WE756N89P');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div id="main-wrapper">
        <!-- Page Preloader -->
        <div id="preloader">
            <div id="status">
                <div class="status-mes"></div>
            </div>
        </div>
        <div class="uc-mobile-menu-pusher">
            <div class="content-wrapper">
                                <!-- .navbar-top -->
                <nav class="navbar m-menu navbar-default">
                    <div class="container">
                        <!-- Brand and toggle get grouped for better mobile display -->
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse-1">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                                                        <a class="navbar-brand" href="/">Hiddify Next节点分享</a>
                                                    </div>
                        <!-- Collect the nav links, forms, and other content for toggling -->
                        <div class="collapse navbar-collapse" id="#navbar-collapse-1">
                            <ul class="nav navbar-nav navbar-right main-nav">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                <li><a href="/news/">新闻资讯</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div>
                        <!-- .navbar-collapse -->
                    </div>
                    <!-- .container -->
                </nav>
                <!-- .nav -->
                <section class="single-page-title single-page-title-about">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                <h2>node.js &#8211; 包、express</h2>
                            </div>
                        </div>
                    </div>
                </section>
                <!-- .page-title -->
                <section class="featured-box">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-9">
                                <ol class="breadcrumb">
                                  <li><a href="/">首页</a></li>
                                  <li><a href="/news/">新闻资讯</a></li>
                                  <li class="active">正文</li>
                                </ol>

                                                <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>首先，要先在这里分享一下我的喜悦，从昨天开始其实一直都在喜悦当中的，我收到了我的第一份offer，这感觉不摆了，比第一桶金都还舒服，虽然我还没收到第一桶金哈哈，不过offer都得了应该也快了。</p> <p>今天的内容有点小多，容我慢慢道来</p> <p>1.</p> <p>首先我们看到包的管理配置文件以及下包慢的问题，在我们多人协作下，是不是要经常把自己的代码共享出去通过git、github之类的，那么我应该发现一个问题，一个项目文件，有30M大小，而代码只有区区2M左右的内存，剩余的都给谁了？都给了第三方包也就是node_modules里面的内容，所以为了轻量化，我们在共享代码的时候肯定是不能带node_modules这个文件夹的，把她扔进.gitignore文件里面忽略掉，那我们没有了第三方包的依赖怎么执行代码呢，第三方包肯定还是要的，没有怎么能行，我们有一个package.json的文件在这里面存放了安装的所有的第三方包的内容。</p> <p>1.1</p> <p>快速创建packagejson</p> <p>只需要在项目的文件中执行node init -y</p> <p>要注意一下，只能在英文目录下去创建这个文件，这里的英文是当前目录为英文，也就是上一级为中文都没的关系，然后就是当我们运行npm i安装第三方包的时候就会把信息给到这个json文件中，所以我们在安装前要先创建json文件。</p> <p>1.2</p> <p>dependencies节点</p> <p>这是这个json里面的节点名，记录了npm安装了哪些包</p> <p>1.3</p> <p>既然我们没有包，又知道了所有需要的包名，那么怎么来一次性安装所有的包？</p> <p>npm install或者i不添加包名即可安装所有的包</p> <p>1.4</p> <p>卸载包</p> <p>npm uninstall 包名没有简写</p> <p>1.5</p> <p>devDependencies节点</p> <p>这个节点也是保存的安装的包，有些包是我们在项目开发过程中才会用到，而有些包使我们开发上线都会用到的包，我们一般把前者放在devDependencies节点里面，把后者放在dependencies节点里面。</p> <p>当然他也有特定的安装方式</p> <p>npm i 包名 -D</p> <p>2.</p> <p>然后我们看到下包会慢的一些原因，是因为我们的npm的服务器是国外的，通过海底光缆传过来的数据当然慢，所以这个时候我们需要把npm的镜像服务器换掉，通过npm config set registry可以查看当前npm的服务器</p> <p>再通过npm config set registry='淘宝或者腾讯的镜像地址'就可以设置过来了。</p> <p>之所以粗略带过，是因为我们有简便方法，通过npm先安装一个nrm全局可用工具，全局就需要在包名后面添加一个-g</p> <p>然后nrm ls 可查看当前可设置的服务器地址，再用nrm use 加这个服务器名字即可使用。</p> <p>3.</p> <p>包的分类</p> <p>我们把包分为两大类，一个是项目包，就是被安装到node_modules里面的包，这里面又有开发依赖包放在devDependencies节点里面的和核心依赖包开发上线都用得到的，</p> <p>二个是全局包，放在c盘目录下面的，安装的时候通过-g参数安装的。</p> <p>注意一下：只有工具性质的包才有全局安装的必要，因为他们提供了终端的一些命令</p> <p>3.1</p> <p>i5ting_toc</p> <p>可以把md文件转换为html的小工具，注意是工具，这个其实挺方便的，前面一直用的Markdownpad2。</p> <p>怎么来使用呢？</p> <p>i5ting_toc&nbsp; -f&nbsp; md文件路径 -o表示浏览器打开</p> <p>3.2</p> <p>一个规范包的结构必须要包含三个东西</p> <p>①每个包必须是单独目录</p> <p>②包的顶级目录下必须包含package.json</p> <p>③packag.json必须包含name、version、main三个属性</p> <p>接下来我们就来做一个 属于自己的包：要实现的功能就为：可以格式化日期、可以对html中的字符转义为特殊字符又转义回来。</p> <p>首先要初始化包的基本结构，创建一个包的文件夹，里面放三个文件，index.js、package.json、README.md分别表示包入口文件、包的配置文件、包说明文档。</p> <p>接下来在初始化package.json里面的内容，｛name：使我们包的名字到时候npm网站上搜索也是这个名字，所以使用前先去网站看一下有没有重名的，</p> <p>version：版本号，</p> <p>main：入口文件，说明了我们的导入就为这个文件要注意一下，如果说外界导入的时候只是导入了一个目录，并不是这个js文件，那么node就会去找这个目录下的package.json里面的main再去找入口文件,</p> <p>description:详细介绍，</p> <p>keywords：关键字是一个数组，</p> <p>license：开原许可协议｝</p> <p>接下来就是在index.js中定义三个功能的函数了 ，这里有一个很重要的概念，模块化，我们的格式化时间是不是需要一个函数，还要补零是不是又要一个函数，那么这两个函数可以放在一个单独的js文件里面，我们的html转为特殊字符、特殊字符返回html也需要一个单独的js文件，完成过后需要在各自的文件把函数放进exports里面，然后index.js导入两个js文件他此时得到的是一个放有这几个函数的对象，我们需要通过es6语法中的扩展运算法，给她解构出来，就只有逗号分隔的函数了，这里有点绕可以配合代码好好理解下。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3f295a75c6674b259ee68a15997a239e.jpg" alt="node.js - 包、express"></p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1.格式化时间</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> dateFormat(time) {     const date</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Date(time)     let y</span>=<span style="color: rgba(0, 0, 0, 1)"> date.getFullYear()     let m</span>= getZero(date.getMonth() + 1<span style="color: rgba(0, 0, 0, 1)">)     let d</span>=<span style="color: rgba(0, 0, 0, 1)"> getZero(date.getDate())     let h</span>=<span style="color: rgba(0, 0, 0, 1)"> getZero(date.getHours())     let mm</span>=<span style="color: rgba(0, 0, 0, 1)"> getZero(date.getMinutes())     let s</span>=<span style="color: rgba(0, 0, 0, 1)"> getZero(date.getSeconds())</span><span style="color: rgba(0, 0, 255, 1)">return</span> `${y}-${m}-<span style="color: rgba(0, 0, 0, 1)">${d} ${h}:${mm}:${s}` }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.补零函数</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> getZero(n) {</span><span style="color: rgba(0, 0, 255, 1)">return</span> n &lt; 10 ? '0' +<span style="color: rgba(0, 0, 0, 1)"> n : n }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">  6.1共享成员</span> module.exports =<span style="color: rgba(0, 0, 0, 1)"> {     dateFormat }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 4.html转义函数</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> getHtmlCode(htmlStr) {</span><span style="color: rgba(0, 0, 255, 1)">return</span> htmlStr.replace(/&lt;|&gt;|"|&amp;/g, match =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)">(match) {</span><span style="color: rgba(0, 0, 255, 1)">case</span> '&lt;'<span style="color: rgba(0, 0, 0, 1)">:</span><span style="color: rgba(0, 0, 255, 1)">return</span> '&amp;lt;'<span style="color: rgba(0, 0, 255, 1)">case</span> '&gt;'<span style="color: rgba(0, 0, 0, 1)">:</span><span style="color: rgba(0, 0, 255, 1)">return</span> '&amp;gt;'<span style="color: rgba(0, 0, 255, 1)">case</span> '"'<span style="color: rgba(0, 0, 0, 1)">:</span><span style="color: rgba(0, 0, 255, 1)">return</span> '&amp;quot;'<span style="color: rgba(0, 0, 255, 1)">case</span> '&amp;'<span style="color: rgba(0, 0, 0, 1)">:</span><span style="color: rgba(0, 0, 255, 1)">return</span> '&amp;amp;'<span style="color: rgba(0, 0, 0, 1)">         }     }) }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 5.还原html</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> getHtml(htmlStr) {</span><span style="color: rgba(0, 0, 255, 1)">return</span> htmlStr.replace(/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g, match =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 0, 255, 1)">switch</span><span style="color: rgba(0, 0, 0, 1)">(match) {</span><span style="color: rgba(0, 0, 255, 1)">case</span> '&amp;lt;'<span style="color: rgba(0, 0, 0, 1)">:</span><span style="color: rgba(0, 0, 255, 1)">return</span> '&lt;'<span style="color: rgba(0, 0, 255, 1)">case</span> '&amp;gt;'<span style="color: rgba(0, 0, 0, 1)">:</span><span style="color: rgba(0, 0, 255, 1)">return</span> '&gt;'<span style="color: rgba(0, 0, 255, 1)">case</span> '&amp;quot;'<span style="color: rgba(0, 0, 0, 1)">:</span><span style="color: rgba(0, 0, 255, 1)">return</span> '"'<span style="color: rgba(0, 0, 255, 1)">case</span> '&amp;amp;'<span style="color: rgba(0, 0, 0, 1)">:</span><span style="color: rgba(0, 0, 255, 1)">return</span> '&amp;'<span style="color: rgba(0, 0, 0, 1)">             }         }) }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 6.2共享成员</span> module.exports =<span style="color: rgba(0, 0, 0, 1)"> {     getHtmlCode,     getHtml }</span></pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">index.js<br/>//</span><span style="color: rgba(0, 128, 0, 1)"> 6.3 导入</span> const date = require('./src/dateFormat'<span style="color: rgba(0, 0, 0, 1)">) const strEscape</span>= require('./src/strEscape'<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3.共享成员</span> module.exports =<span style="color: rgba(0, 0, 0, 1)"> {    ...date,    ...strEscape }</span></pre> </div> <p>test.js</p> <div class="cnblogs_code"> <pre>const bag = require('./index'<span style="color: rgba(0, 0, 0, 1)">) console.log(bag.dateFormat(</span><span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Date())); console.log(bag.getHtmlCode(</span>'&lt;h2&gt;我是一个大温柔"嘻嘻"ss&amp;&lt;/h2&gt;'<span style="color: rgba(0, 0, 0, 1)">)); console.log(bag.getHtml(</span>'&amp;lt;h2&amp;gt;我是一个大温柔&amp;quot;嘻嘻&amp;quot;ss&amp;amp;&amp;lt;/h2&amp;gt;'));</pre> </div> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f28da2f79a5126fe7377eaa4da79d8ca.jpg" alt="node.js - 包、express"></p> <p>&nbsp;3.3</p> <p>我们继续看到怎么来编写包的说明文档，就是把包的作用以及用法，注意事项说明清楚即可</p> <div> <div>## 安装</div> <div>```</div> <p></p> <div>npm i mybag-huang</div> <p></p> <div>```</div> <p></p> <div>## 导入</div> <div>```js</div> <p></p> <div>const mybag = require('mybag-huang')</div> <p></p> <div>```</div> <p></p> <div>## 格式化时间</div> <p></p> <div>```js</div> <p></p> <div>const time = mybag.dateFormat(new Date())</div> <p></p> <div>```</div> <div>## 转义html代码中的特殊字符</div> <div>```js</div> <p></p> <div>&nbsp;mybag.getHtmlCode('&lt;h2&gt;我是一个大温柔"嘻嘻"ss&amp;&lt;/h2&gt;')</div> <p></p> <div>&nbsp;```</div> <p></p> <div>&nbsp;## 转义html代码中的正常字符</div> <div>&nbsp;```js</div> <p></p> <div>&nbsp;mybag.getHtml('&amp;lt;h2&amp;gt;我是一个大温柔&amp;quot;嘻嘻&amp;quot;ss&amp;amp;&amp;lt;/h2&amp;gt;')</div> <p></p> <div>```</div> <p></p> <div>## 开源协议</div> <div>ISC</div> </div> <div>3.4</div> <div>发布包</div> <div>首先注册npm账号，然后登陆 账号是在终端上登录：npm login</div> <div>然后到所处的包的 目录下 npm pbulish既可以发布在npm网站上，但是要注意一下，需要切回到官方的服务器才能够发布成功。</div> <div>删除已发布的包npm unpublish 包名 --force 只能删除发布后72小时内的包，删除后二十四小时内不可再发布相同的包</div> <div>4.</div> <div>模块加载机制</div> <div>我们的模块都是优先从缓存当中来加载的，当我们导入过后就会第一时间加载在缓存中，所以导入相同的文件不管你导入多少次，都是加载的第一个文件。</div> <div>内置模块的加载机制</div> <div>内置模块加载的优先级最高，比如说内置模块和我们的自定义模块如果名字一样，那么导入的时候是认为这是一个内置模块的。</div> <div>自定义模块的加载机制</div> <div>require里面的文件必须以./或者../开头不然就会被当为内置或者第三方模块。</div> <div>如果说省略了扩展名，那么node会依次开始查找js、json、node的文件扩展名都没有找到就会报错。</div> <div>第三方模块的加载机制</div> <div>require不是内置模块也不是,/开头那么就会从当前目录的modules文件夹里面开始照这个第三方模块而且没找到的话会继续往上一级找，直到找到根目录为止。</div> <div>当你把目录作为require的路径时，会首先去找package里面的main如果没有指定，就会加载当前目录下的index.js都没有就会报错。</div> <div></div> <div>5.</div> <div>express</div> <div>5.1</div> <div>首先什么叫做express</div> <div>他和http内置模块相同，专门创建web服务器的</div> <div>5.2</div> <div>基本使用</div> <div>1.安装</div> <div>npm i express</div> <div>2.创建web服务器</div> <div>①导入express</div> <div>②创建服务器</div> <div>const app = express（）</div> <div>③diaoyong</div> <div>app.listen(端口号，回调函数)</div> <div>3.</div> <div>监听get、post</div> <div>app.get/post（url，回调函数）</div> <div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 1.导入</span> const express = require('express'<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 2.创建服务器</span> const app =<span style="color: rgba(0, 0, 0, 1)"> express()</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 4.监听客户端的get和post请求并响应</span> app.get('/index.html ', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     res.send({</span>"name" : "zs"<span style="color: rgba(0, 0, 0, 1)">,</span>"sex" : "男"<span style="color: rgba(0, 0, 0, 1)">,</span>"age" : 19<span style="color: rgba(0, 0, 0, 1)">     }) }) app.post(</span>'/index', (req, res) =&gt; res.send('post成功'<span style="color: rgba(0, 0, 0, 1)">))</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 3.开启服务器</span> app.listen(80, () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     console.log(</span>'express server running at http://127.0.0.1'<span style="color: rgba(0, 0, 0, 1)">     ) })</span></pre> </div> <p>4</p> <p>获取url中的参数</p> <p>通过req.query获得一个对象保存的参数</p> <div class="cnblogs_code"> <pre>const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express() app.get(</span>'/', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     res.send(req.query) }) app.listen(</span>80, () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     console.log(</span>'express server running at http://127.0.0.1'<span style="color: rgba(0, 0, 0, 1)">); })</span></pre> </div> <p>获取url当中的动态参数</p> <p>req.params</p> <div class="cnblogs_code"> <pre>const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express() app.get(</span>'/:id', (req, res) =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     console.log(req.params); }) app.listen(</span>80, () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {     console.log(</span>'express server running at http://127.0.0.1'<span style="color: rgba(0, 0, 0, 1)">); })</span></pre> </div> <p>5.3</p> <p>托管静态资源</p> <p>express.static（）这个方法可以创建静态服务器的时候，将文件目录下的css、图片、js等共享出去对外开放。</p> <p>app.use(express.static('文件夹'))要注意一点对谁开放那么这个目录是不会出现在url路径当中的</p> <div class="cnblogs_code"> <pre>const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express()  app.use(express.static(</span>'./clock'<span style="color: rgba(0, 0, 0, 1)">))   app.listen(</span>80, () =&gt; console.log('express server running at http://127.0.0.1'))</pre> </div> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/fc33ad40a68e3d14333c24e191ca0fc3.jpg" alt="node.js - 包、express"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/be094229e4fd14aead34abc5e827ae63.jpg" alt="node.js - 包、express"></p> <p>&nbsp;如果要托管多个目录就把代码执行多次即可，但是要注意如果访问的文件名有几个目录都有的话，会按照顺序执行前面的。</p> <p>挂在路径前缀</p> <div class="cnblogs_code"> <pre>const express = require('express'<span style="color: rgba(0, 0, 0, 1)">) const app</span>=<span style="color: rgba(0, 0, 0, 1)"> express()  app.use(</span>'/abc',express.static('./clock'<span style="color: rgba(0, 0, 0, 1)">))   app.listen(</span>80, () =&gt; console.log('express server running at http://127.0.0.1'))</pre> </div> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b0c59da2d7f0e99c037b8a19c85e1061.jpg" alt="node.js - 包、express"></p> <p>&nbsp;5.4</p> <p>今天最后的内容更新一个很实用的小工具，nodemon直接全局安装，他的作用就是我们平时改了一下代码，比如服务器必须重新断开重新连接，才会看到效果就会很麻烦，而有了这个工具后直接执行nodemon 文件名他就会检测到我们的代码修改情况自动去重新启动，就跟我们html的live一样</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-35903.htm">南京宠物狗领养地址在哪里呀（南京宠物狗领养地址在哪里呀最近）</a></p>
                                        <p>下一个：<a href="/news/article-36542.htm">宠物粮十大品牌（宠物粮十大品牌排名）</a></p>
                                    </div>
                                            </div>
                            <div class="col-md-3">
                                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-20137.htm" title="动物疫苗上市企业有哪些品牌的（国内动物疫苗龙头企业）">动物疫苗上市企业有哪些品牌的（国内动物疫苗龙头企业）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-13-free-clash.htm" title="「11月13日」最高速度18M/S，2024年Hiddify Next每天更新免费节点订阅链接">「11月13日」最高速度18M/S，2024年Hiddify Next每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-8-free-v2ray.htm" title="「11月8日」最高速度21.8M/S，2024年Hiddify Next每天更新免费节点订阅链接">「11月8日」最高速度21.8M/S，2024年Hiddify Next每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-3-free-clash-subscribe.htm" title="「1月3日」最高速度18.5M/S，2025年Hiddify Next每天更新免费节点订阅链接">「1月3日」最高速度18.5M/S，2025年Hiddify Next每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-5-free-v2ray-subscribe.htm" title="「12月5日」最高速度22.3M/S，2024年Hiddify Next每天更新免费节点订阅链接">「12月5日」最高速度22.3M/S，2024年Hiddify Next每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-23803.htm" title="python与hadoop/hdfs的交互，读取文件/下载/上传/删除">python与hadoop/hdfs的交互，读取文件/下载/上传/删除</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-6-shadowrocket-node.htm" title="「1月6日」最高速度18.6M/S，2025年Hiddify Next每天更新免费节点订阅链接">「1月6日」最高速度18.6M/S，2025年Hiddify Next每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-28461.htm" title="狗粮国内排名前十品牌（国内狗粮十大品牌）">狗粮国内排名前十品牌（国内狗粮十大品牌）</a></li>
                        <li class="py-2"><a href="/news/article-28916.htm" title="我们如何更改MySQL AUTO_INCREMENT起始号码？">我们如何更改MySQL AUTO_INCREMENT起始号码？</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-25-free-high-speed-nodes.htm" title="「10月25日」最高速度22.8M/S，2024年Hiddify Next每天更新免费节点订阅链接">「10月25日」最高速度22.8M/S，2024年Hiddify Next每天更新免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">21</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>



                            </div>
                        </div>
                    </div>
                </section>
                                <footer class="footer">
                    <div class="copyright-section">
                        <div class="container clearfix">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <span class="copytext">
                                Hiddify Next节点分享站 版权所有 Powered by WordPress
                            </span>
                            <ul class="list-inline pull-right">
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                <li><a href="/news/">新闻资讯</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </div><!-- .container -->
                    </div><!-- .copyright-section -->
                </footer>
                <!-- .footer -->
            </div>
            <!-- .content-wrapper -->
        </div>
        <!-- .offcanvas-pusher -->
        <div class="uc-mobile-menu uc-mobile-menu-effect">
            <button type="button" class="close" aria-hidden="true" data-toggle="offcanvas" id="uc-mobile-menu-close-btn">&times;</button>
            <div>
                <div>
                    <ul id="menu">
                        <li><a href="index.html">Home</a></li>
                        <li><a href="about.html">About</a></li>
                        <li><a href="services.html">Services</a></li>
                        <li><a href="contact.html">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <!-- .uc-mobile-menu -->
    </div>
    <!-- #main-wrapper -->
    <!-- Script -->
    <script src="/assets/website/js/frontend/nexthiddify/jquery-2.1.4.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    <script src="/assets/website/js/frontend/nexthiddify/smoothscroll.js"></script>
    <script src="/assets/website/js/frontend/nexthiddify/mobile-menu.js"></script>
    <script src="/assets/website/js/frontend/nexthiddify/scripts.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>